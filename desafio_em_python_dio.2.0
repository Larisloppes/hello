Descrição
Uma nova feature para um sistema bancário foi analisada pela equipe de desenvolvimento e será uma das tarefas a serem trabalhadas durante a sprint, como desenvolvedor da empresa você recebeu os requisitos para a nova implementação que consiste em uma solução algorítmica que permita aos clientes realizarem saques em caixas eletrônicos. No entanto, existem algumas regras a serem seguidas para garantir que um saque possa ser realizado com sucesso.

Regras do saque:

- Cada cliente digitará o valor do seu saldoTotal de sua conta bancária e o valorSaque.
- Um saque só pode ser realizado se o saldoDisponível na conta for igual ou superior ao valor solicitado.
- Se o saldo for suficiente, o valor solicitado deve ser subtraído do saldo disponível, indicando que o saque foi realizado.
- Se o saldo for insuficiente, o saque não deve ser realizado e uma mensagem adequada deve ser exibida.

Entrada
A entrada consiste em dois valores inteiros que representam o total do saldo da conta e o valor do saque.

Saída
Se o saque for realizado com sucesso, exibir a mensagem "Saque realizado com sucesso! Novo saldo: {saldo}", onde {saldo} é o novo saldo disponível na conta.

Se o saque não for possível devido a saldo insuficiente, exibir a mensagem "Saldo insuficiente. Saque nao realizado!"

Exemplos
A tabela abaixo apresenta exemplos com alguns dados de entrada e suas respectivas saídas esperadas. Certifique-se de testar seu programa com esses exemplos e com outros casos possíveis.

Entrada	Saída
 1000
 200

Saque realizado com sucesso! Novo saldo: 800

1500
1800

Saldo insuficiente. Saque nao realizado!
300
200	Saque realizado com sucesso. Novo saldo: 100

# Entrada de dados
saldo_total = int(input())
valor_saque = int(input())

# Verifica se o saldo disponível é suficiente para o saque
if valor_saque <= saldo_total:
    saldo_total -= valor_saque  # Subtrai o valor do saque do saldo total
    print("Saque realizado com sucesso. Novo saldo:", saldo_total)
else:
    print("Saldo insuficiente. Saque nao realizado!")

Desafio
Imagine que você está desenvolvendo um aplicativo para um banco que deseja calcular os juros compostos de um investimento. Seu objetivo é criar uma função que receba três parâmetros: o valor inicial do investimento, a taxa de juros anual e o período de tempo em anos. A função deve calcular e retornar o valor final do investimento após o período determinado, levando em consideração os juros compostos.

Entrada:
A função deve receber os seguintes parâmetros:

valor_inicial: um número inteiro ou decimal representando o valor inicial do investimento.

taxa_juros: um número decimal representando a taxa de juros anual. Por exemplo, se a taxa for de 5%, o valor passado será 0.05.

periodo: um número inteiro representando a quantidade de anos do investimento.

Saída:
A função deve retornar o valor final do investimento após o período determinado, considerando os juros compostos. O valor final deve ser arredondado para duas casas decimais.

Exemplos
A tabela abaixo apresenta exemplos com alguns dados de entrada e suas respectivas saídas esperadas. Certifique-se de testar seu programa com esses exemplos e com outros casos possíveis.

Entrada	Saída
5000
0.08
5

Valor final do investimento: R$ 7346.64
1000
0.06
3

Valor final do investimento: R$ 1191.02
20000
0.04
10

Valor final do investimento: R$ 29604.89

def calcular_valor_final(valor_inicial, taxa_juros, periodo):
    valor_final = valor_inicial * (1 + taxa_juros) ** periodo
    return round(valor_final, 2)

# Entrada de dados
valor_inicial = float(input())
taxa_juros = float(input())
periodo = int(input())

# Chama a função para calcular o valor final do investimento
resultado = calcular_valor_final(valor_inicial, taxa_juros, periodo)

print("Valor final do investimento: R$", resultado)

Desafio
Você foi contratado por um banco para desenvolver um programa que auxilie seus clientes a realizar depósitos em suas contas. O programa deve solicitar ao cliente o valor do depósito e verificar se o valor é válido. Se o valor for maior do que zero, o programa deve adicionar o valor ao saldo da conta. Caso contrário, o programa deve exibir uma mensagem de erro e solicitar um novo valor. O programa deve continuar solicitando valores de depósito até que seja digitado um valor válido.

Entrada
O programa deve utilizar o Scanner para receber os valores de depósito digitados pelo cliente. Os valores podem ser decimais, representando valores em reais.

Saída
O programa deve exibir uma mensagem de sucesso quando um valor de depósito válido for informado e o saldo da conta for atualizado. Caso um valor inválido seja digitado, o programa deve exibir uma mensagem de erro e solicitar um novo valor.

Exemplos
A tabela abaixo apresenta exemplos com alguns dados de entrada e suas respectivas saídas esperadas. Certifique-se de testar seu programa com esses exemplos e com outros casos possíveis.

Entrada	Saída
500.50

 

-100


0

Deposito realizado com sucesso!
Saldo atual: R$ 500.50

Valor invalido! Digite um valor maior que zero.


Encerrando o programa...

valor = float(input())



if valor > 0:



   print(f"Deposito realizado com sucesso!\nSaldo atual: R$ {valor:.2f}")



elif valor < 0:



   print(f"Valor invalido! Digite um valor maior que zero.")



else:



   print(f"Encerrando o programa...")
